import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';
import { API_URL } from '@env';

export default function TranslateScreen() {
  const [word, setWord] = useState('');
  const [translation, setTranslation] = useState(null);
  const [exampleEn, setExampleEn] = useState('');
  const [exampleRu, setExampleRu] = useState('');
  const [status, setStatus] = useState('');
  const [isSaved, setIsSaved] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const handleTranslate = async () => {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥...');  // –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞

    setStatus('‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É...');
    setIsSaved(false);

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`${API_URL}/translate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ word, tox_level: 'mama' }) // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–æ –∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
      });

      const data = await response.json();

      // –õ–æ–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (response.ok) {
        setTranslation(data.translation);
        setExampleEn(data.example_en);
        setExampleRu(data.example_ru);
        setStatus('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
      } else {
        setStatus('‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error);  // –õ–æ–≥ –æ—à–∏–±–æ–∫
      setStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
  const handleAdd = async () => {
    const payload = {
      word,
      translation,
      example_en: exampleEn,
      example_ru: exampleRu
    };
    try {
      const response = await fetch(`${API_URL}/add-from-translate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const data = await response.json();
      if (response.ok) {
        setStatus('üíæ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å');
        setIsSaved(true);
      } else {
        setStatus('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);  // –õ–æ–≥ –æ—à–∏–±–æ–∫
      setStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–°–ª–æ–≤–æ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥:</Text>
      <TextInput
        value={word}
        onChangeText={setWord}
        placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: burnout"
        style={styles.input}
      />
      <Button title="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏" onPress={handleTranslate} />

      {translation && (
        <View style={styles.result}>
          <Text style={styles.text}>üéØ –ü–µ—Ä–µ–≤–æ–¥: {translation}</Text>
          <Text style={styles.text}>üî• EN: {exampleEn}</Text>
          <Text style={styles.text}>üî• RU: {exampleRu}</Text>
          <Button
            title={isSaved ? "‚úÖ –£–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ" : "üíæ –í —Å–ª–æ–≤–∞—Ä—å"}
            onPress={handleAdd}
            disabled={isSaved}
          />
        </View>
      )}

      <Text style={styles.status}>{status}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, flex: 1, backgroundColor: '#fff' },
  title: { fontSize: 18, fontWeight: '600', marginBottom: 10 },
  input: {
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 10,
    padding: 10,
    borderRadius: 5
  },
  result: { marginTop: 20 },
  text: { fontSize: 16, marginBottom: 5 },
  status: { marginTop: 20, fontStyle: 'italic', color: '#555' }
});