import sys
print("üß™ Python version on Render:", sys.version)

from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

import os
import csv
import random
from datetime import datetime

# üîß –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
app = FastAPI()

# üìÄ –®–∞–±–ª–æ–Ω—ã Jinja2
TEMPLATES_DIR = os.path.abspath(os.path.join(
    os.path.dirname(__file__), 'templates'
))
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# üìÅ –°—Ç–∞—Ç–∏–∫–∞ (–ª–µ–∂–∏—Ç –≤ frontend/public)
STATIC_DIR = os.path.abspath(os.path.join(
    os.path.dirname(__file__), '..', '..', 'frontend', 'public'
))

if os.path.exists(STATIC_DIR):
    app.mount("/public", StaticFiles(directory=STATIC_DIR), name="public")
else:
    print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {STATIC_DIR}")

# üìÇ CSV —Å —Ñ—Ä–∞–∑–æ–≤—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
CSV_PATH = os.path.join(os.path.dirname(__file__), "phrasal_verbs.csv")

phrasal_dict = {}
with open(CSV_PATH, encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        verb = row["phrasal_verb"].strip().lower()
        phrasal_dict[verb] = {
            "translation": row["translation"].strip(),
            "example_en": row["example_en"].strip(),
            "example_ru": row["example_ru"].strip(),
        }

# üßê –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_words = []
wrong_words = []

# üìç –ì–ª–∞–≤–Ω–∞—è
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üî• Quiz Now
@app.get("/quiznow", response_class=HTMLResponse)
async def quiz_now(request: Request):
    return templates.TemplateResponse("quiznow.html", {"request": request})

# ‚ûû –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
@app.get("/quiznow/next", response_class=HTMLResponse)
async def quiznow_next(request: Request):
    if not user_words:
        return HTMLResponse("<p>–¢—ã –µ—â—ë –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª, –Ω–æ–ª—å —É—Å–∏–ª–∏–π ‚Äî –Ω–æ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.</p>")

    word = random.choice(user_words)

    distractors = [w["translation"] for w in user_words if w["word"] != word["word"]]
    distractors = list(set(distractors))
    random.shuffle(distractors)

    options = [word["translation"]] + distractors[:2]
    random.shuffle(options)

    return templates.TemplateResponse("quiznow_question.html", {
        "request": request,
        "word": word,
        "options": options
    })

# ‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
@app.post("/quiznow/answer", response_class=HTMLResponse)
async def quiznow_answer(
    request: Request,
    answer: str = Form(...),
    correct: str = Form(...),
    word: str = Form(...)
):
    if answer == correct:
        message = "üòé –ù—É –Ω–µ –∑—Ä—è –¥—ã—à–∏—à—å. –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        message = f"üíÄ –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: <strong>{correct}</strong>.<br>–ü–æ–∑–æ—Ä, –∑–∞–ø–∏—à–∏ 100 —Ä–∞–∑."
        wrong_words.append(word)

    return HTMLResponse(f"""
        <div class='feedback'>
          <p>{message}</p>
          <button class='btn-soft' hx-get='/quiznow/next' hx-target='#quiz-content' hx-swap='innerHTML' style='margin-top: 1rem;'>–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ</button>
        </div>
    """)

# üìç Quiz Week
@app.get("/quizweek", response_class=HTMLResponse)
async def quiz_week(request: Request):
    return templates.TemplateResponse("quizweek.html", {"request": request})

# üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
@app.get("/translate", response_class=HTMLResponse)
async def get_translate(request: Request):
    return templates.TemplateResponse("translate.html", {"request": request})

@app.post("/translate", response_class=HTMLResponse)
async def post_translate(request: Request, word: str = Form(...)):
    word = word.strip().lower()
    result = phrasal_dict.get(word)

    if result:
        result["word"] = word
    else:
        result = {
            "word": word,
            "translation": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–∂–µ—Ç, —Ç—ã –≤—ã–¥—É–º—ã–≤–∞–µ—à—å?",
            "example_en": "",
            "example_ru": ""
        }

    return templates.TemplateResponse("translate_result.html", {
        "request": request,
        "result": result
    })

# üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
@app.post("/add_word", response_class=HTMLResponse)
async def add_word(
    word: str = Form(...),
    translation: str = Form(...),
    example_en: str = Form(...),
    example_ru: str = Form(...)
):
    user_words.append({
        "word": word,
        "translation": translation,
        "example_en": example_en,
        "example_ru": example_ru,
        "added": datetime.now().isoformat()
    })

    return """
    <div id=\"add-button-container\">
      <button disabled style=\"background-color: #22c55e; color: white; border: none; padding: 0.75rem 1.75rem; font-size: 1rem; font-weight: 600; border-radius: 0.5rem; text-align: center; cursor: default;\">
        ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
      </button>
    </div>
    """

# üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å"
@app.get("/mywords", response_class=HTMLResponse)
async def get_mywords(request: Request):
    return templates.TemplateResponse("mywords.html", {
        "request": request,
        "words": user_words
    })