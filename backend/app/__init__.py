from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import os
import csv  # ‚úÖ –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç–æ

from datetime import datetime

app = FastAPI()

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–æ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="app/templates")

# üìå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# ‚¨áÔ∏è –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, —á—Ç–æ–±—ã —É–π—Ç–∏ –∏–∑ backend/
import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
STATIC_DIR = os.path.join(BASE_DIR, "frontend", "public")

print("–°—Ç–∞—Ç–∏–∫–∞ –∏–∑ –ø–∞–ø–∫–∏:", STATIC_DIR)

app.mount("/public", StaticFiles(directory=STATIC_DIR), name="public")

templates = Jinja2Templates(directory="app/templates")

# ‚¨ÖÔ∏è –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


# –ü—É—Ç—å –∫ CSV —Å —Ñ—Ä–∞–∑–æ–≤—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
CSV_PATH = os.path.join(os.path.dirname(__file__), "phrasal_verbs.csv")

# –°–ª–æ–≤–∞—Ä—å —Å —Ñ—Ä–∞–∑–æ–≤—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
phrasal_dict = {}
with open(CSV_PATH, encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        verb = row["phrasal_verb"].strip().lower()
        phrasal_dict[verb] = {
            "translation": row["translation"].strip(),
            "example_en": row["example_en"].strip(),
            "example_ru": row["example_ru"].strip(),
        }

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
user_words = []

# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# üîπ –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Quiz Now
@app.get("/quiznow", response_class=HTMLResponse)
async def quiz_now(request: Request):
    return templates.TemplateResponse("quiznow.html", {"request": request})

# üîπ –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Quiz Week
@app.get("/quizweek", response_class=HTMLResponse)
async def quiz_week(request: Request):
    return templates.TemplateResponse("quizweek.html", {"request": request})

# üîπ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
@app.get("/translate", response_class=HTMLResponse)
async def get_translate(request: Request):
    return templates.TemplateResponse("translate.html", {"request": request, "result": None, "added": False})

@app.post("/translate", response_class=HTMLResponse)
async def post_translate(request: Request, word: str = Form(...)):
    word = word.strip().lower()
    result = phrasal_dict.get(word)
    if result:
        result["word"] = word
    else:
        result = {
            "word": word,
            "translation": "–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–∂–µ—Ç, —Ç—ã –≤—ã–¥—É–º—ã–≤–∞–µ—à—å?",
            "example_en": "",
            "example_ru": ""
        }
    return templates.TemplateResponse("translate.html", {"request": request, "result": result, "added": False})

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
@app.post("/add_word", response_class=HTMLResponse)
async def add_word(
    word: str = Form(...),
    translation: str = Form(...),
    example_en: str = Form(...),
    example_ru: str = Form(...)
):
    user_words.append({
        "word": word,
        "translation": translation,
        "example_en": example_en,
        "example_ru": example_ru,
        "added": datetime.now().isoformat()
    })
    return """
    <div id="add-button-container">
        <button disabled class='bg-green-500 text-white font-semibold px-6 py-3 rounded w-full text-xl transition'>
            ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
        </button>
    </div>
    """